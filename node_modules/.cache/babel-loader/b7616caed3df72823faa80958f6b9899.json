{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Desktop/dev/react/codeSnippets/hooksgalore/src/todos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from './todo';\nimport Form from './form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDos() {\n  _s();\n\n  const [todoList, updateTodoList] = useState([{\n    id: 1,\n    task: \"homewor\",\n    completed: false\n  }]);\n  const [userInput, setUserInput] = useState();\n\n  const handlesubmit = e => {\n    e.preventDefault();\n    addTask(userInput);\n    setUserInput(\"\");\n  };\n\n  const upddateNewValue = e => {\n    setUserInput(e.target.value);\n    console.log(userInput);\n  };\n\n  const addTask = userInput => {\n    let copy = [...todoList];\n    copy = [...copy, {\n      id: Math.floor(Math.random() * 100),\n      task: userInput,\n      completed: false\n    }];\n    updateTodoList([...copy, userInput]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      userInput: userInput,\n      handlesubmit: handlesubmit,\n      upddateNewValue: upddateNewValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this), todoList.map(tasks => {\n      return /*#__PURE__*/_jsxDEV(Todo, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDos, \"QpMbOUS0Go789P5eQaT3TlyqtWY=\");\n\n_c = ToDos;\nexport default ToDos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDos\");","map":{"version":3,"sources":["/Users/justin/Desktop/dev/react/codeSnippets/hooksgalore/src/todos.js"],"names":["React","useState","Todo","Form","ToDos","todoList","updateTodoList","id","task","completed","userInput","setUserInput","handlesubmit","e","preventDefault","addTask","upddateNewValue","target","value","console","log","copy","Math","floor","random","map","tasks"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,SAASC,KAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,QAAD,EAAWC,cAAX,IAA6BL,QAAQ,CAAC,CAAC;AAACM,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC,SAAb;AAAwBC,IAAAA,SAAS,EAAE;AAAnC,GAAD,CAAD,CAA3C;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;;AAEA,QAAMW,YAAY,GAAIC,CAAD,IAAM;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACL,SAAD,CAAP;AACAC,IAAAA,YAAY,CAAC,EAAD,CAAZ;AAEH,GALD;;AAOA,QAAMK,eAAe,GAAIH,CAAD,IAAO;AAC3BF,IAAAA,YAAY,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAZ;AAGH,GALD;;AAOA,QAAMK,OAAO,GAAIL,SAAD,IAAe;AAE3B,QAAIW,IAAI,GAAG,CAAC,GAAGhB,QAAJ,CAAX;AACAgB,IAAAA,IAAI,GAAG,CAAC,GAAGA,IAAJ,EAAU;AAACd,MAAAA,EAAE,EAAEe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAL;AAAsChB,MAAAA,IAAI,EAAEE,SAA5C;AAAwDD,MAAAA,SAAS,EAAE;AAAnE,KAAV,CAAP;AACAH,IAAAA,cAAc,CAAC,CAAC,GAAGe,IAAJ,EAAUX,SAAV,CAAD,CAAd;AACH,GALD;;AASA,sBAEI;AAAK,IAAA,SAAS,EAAE,WAAhB;AAAA,4BAKD,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEA,SAAjB;AAA4B,MAAA,YAAY,EAAEE,YAA1C;AAAwD,MAAA,eAAe,EAAEI;AAAzE;AAAA;AAAA;AAAA;AAAA,YALC,EAOAX,QAAQ,CAACoB,GAAT,CAAeC,KAAD,IAAW;AAErB,0BACI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAIJ,KANA,CAPA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAsBH;;GAlDQtB,K;;KAAAA,K;AAqDT,eAAeA,KAAf","sourcesContent":["import React, {useState} from 'react'; \nimport Todo from './todo';\nimport Form from './form';\n\n\nfunction ToDos(){\n    const [todoList, updateTodoList] = useState([{id: 1, task:\"homewor\", completed: false}]);\n\n    const [userInput, setUserInput] = useState();\n\n    const handlesubmit = (e)=> {\n        e.preventDefault(); \n        addTask(userInput);\n        setUserInput(\"\")\n\n    }\n    \n    const upddateNewValue = (e) => {\n        setUserInput(e.target.value); \n        console.log(userInput);\n    \n    \n    }\n\n    const addTask = (userInput) => {\n\n        let copy = [...todoList]; \n        copy = [...copy, {id: Math.floor(Math.random() * 100), task: userInput,  completed: false}];\n        updateTodoList([...copy, userInput]); \n    }\n\n   \n\n    return(\n\n        <div className =\"container\">\n       \n\n       \n       \n       <Form userInput={userInput} handlesubmit={handlesubmit} upddateNewValue={upddateNewValue}/>\n       \n       {todoList.map( (tasks) => {\n\n            return (\n                <Todo tasks={tasks} />\n            )\n\n       }\n\n       )}\n        \n        </div>\n    ); \n\n}\n\n\nexport default ToDos; "]},"metadata":{},"sourceType":"module"}